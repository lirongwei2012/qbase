struts2入门
项目用的是struts2，在这儿我写一下struts2的基本用法。
添加好几个必要的库之后，还要在src目录下边添加struts.xml,这是项目的必需内容。先简要介绍一下项目部署在容器里头之后，用户在
浏览器上输入一个url，浏览器会向服务器发出http请求，请求到对应的服务器。然后服务器进行相应的返回。比如我刚写的一个测试程序。
用户在浏览器上输入http://localhost:8080/testWeb/Menu.action，浏览器会在tomcat容器中查找testweb这个项目，然后读取web.xml
这个文件，里头这几行配置信息
<filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
</filter>

 <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
 </filter-mapping>
什么意思呢,我们先看  <url-pattern>/*</url-pattern>， /* 匹配所有的的url。然后这些url经过struts2过滤。具体是
org.apache.struts2.dispatcher.FilterDispatcher这个类，其实说白了struts2是什么呢，就是一个拦截器，拦截器干嘛的，见过渔网吧
，渔网就是网鱼的。剩下的水呢，这些东西不重要，我们就让它流走。拦截器就是抓取最重要的东西，将来我写的有关ognrul,stack等等都
是基于拦截器的。接着读取下一个配置文件struts.xml我们前边输入url有个Menu.action.在struts.xml上找找。struts.xml有这样一条记录
<action name="Menu">
  			<result>/menu/Menu.jsp</result>
</action>
意思就是当输入的action名字叫 Menu时，就去查找文件夹 menu下的Menu.jsp。我们就可以在浏览器上看到Menu.jsp的视图了。学到这儿
struts已经算是入门了。

struts2 学习1 model driven
model driven 里边就只有一个方法 T getModel();什么意思呢，就是返回一个模型呢，我们在处理数据输入时方便了一点。一般我们这么做
比如我今天写到的例子
public Object getModel() {
        	
	return user;
}
这样就返回了一个对象。我们前边提到过拦截器。struts2有很多拦截器，其中有一个是params拦截器，就是拦截用户输入的数据把它们
放到动作对象上去。就是前边返回的user.

struts2 学习2 validate
validate就是验证消息。struts2 项目一般都是继承actionSuport，并且重写其中的两个方法validate和execute。validate判断输入是否
符合要求，这就看你有什么需求了。如果不符合要求，我们一般会这么写


if ( ps.userExists( user.getUsername() ) ){        	
	addFieldError("username", getText( "user.exists"));
}
validate方法返回值为空。如果用户名已经存在，就执行addFieldError方法。addFieldError方法会提前返回input。然后把结果交给xml
处理

struts2 学习3 execute
execute方法一般做这几件事情，添加用户，返回一个字符串。然后将结果返回给struts.xml处理

struts 学习4 拦截器
struts2项目都会继承struts-default。这样引入了struts-default.xml
struts-default主要是用来申明拦截器的。我们可以看看这样一段代码：
<interceptor-stack name="basicStack">
                <interceptor-ref name="exception"/>
                <interceptor-ref name="servletConfig"/>
                <interceptor-ref name="prepare"/>
                <interceptor-ref name="checkbox"/>
                <interceptor-ref name="multiselect"/>
                <interceptor-ref name="actionMappingParams"/>
                <interceptor-ref name="params">
                    <param name="excludeParams">dojo\..*,^struts\..*,^session\..*,^request\..*,^application\..*,^servlet(Request|Response)\..*,parameters\...*</param>
                </interceptor-ref>
                <interceptor-ref name="conversionError"/>
            </interceptor-stack>
这段代码申明了拦截器的调用顺序。其中exception是最先调用的一个拦截器。拦截器做的工作以下这几个方面
1：做一些预处理。
2：调用invoke方法将控制权限转移给后续拦截器。
3：做一些后续处理.
